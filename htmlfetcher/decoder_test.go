package htmlfetcher

import (
	"bytes"
	"testing"
)

// sample HTML content encoded in ISO-8859-1 including Tårnborggård, Tårnborg
var iso88591HTML = []byte{
	0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E,
	0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2D, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x3D, 0x22, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E,
	0x74, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74,
	0x65, 0x6E, 0x74, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x68, 0x74,
	0x6D, 0x6C, 0x3B, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3D,
	0x69, 0x73, 0x6F, 0x2D, 0x38, 0x38, 0x35, 0x39, 0x2D, 0x31, 0x22, 0x3E,
	0x3C, 0x2F, 0x6D, 0x65, 0x74, 0x61, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61,
	0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x54, 0xE5, 0x72, 0x6E,
	0x62, 0x6F, 0x72, 0x67, 0x67, 0xE5, 0x72, 0x64, 0x2C, 0x20, 0x54, 0xE5,
	0x72, 0x6E, 0x62, 0x6F, 0x72, 0x67, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79,
	0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E,
}

// very sample HTML content encoded in UTF-8
var utf8HTML = []byte(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>UTF-8 Example</title>
</head>
<body>
    Tårnborggård, Tårnborg
</body>
</html>
`)

func TestDecode(t *testing.T) {
	testCases := []struct {
		name           string
		input          []byte
		expectedOutput []byte
		expectedError  error
	}{
		{
			name:           "ISO-8859-1 encoded HTML",
			input:          iso88591HTML,
			expectedOutput: []byte(`<html><head><meta http-equiv="content-type" content="text/html; charset=iso-8859-1"></meta></head><body>Tårnborggård, Tårnborg</body></html>`),
			expectedError:  nil,
		},
		{
			name:           "UTF-8 encoded HTML",
			input:          utf8HTML,
			expectedOutput: utf8HTML,
			expectedError:  nil,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			output, err := decode(tc.input)
			if err != tc.expectedError {
				t.Fatalf("expected error %v, got %v", tc.expectedError, err)
			}
			if !bytes.Equal(output, tc.expectedOutput) {
				t.Errorf("expected output %s, got %s", tc.expectedOutput, output)
			}
		})
	}
}
